{{> pageHeader title="Check-in" url="/" }}

<div class="page--data">

<p>
	<small>
		‚öôÔ∏è <strong>Note:</strong> This page benefits largely from having
		JavaScript enabled. It'll retrieve your location and dynamically
		fetch nearest locations, and allow for photo uploads.
	</small>
</p>

<div id="geolocation" class="info rounded-panel" style="margin-top: 32px; display: none">
	<p id="geolocation-text">
		üìç Fetching geolocation, please accept permission and wait.
	</p>
</div>

{{> internal/checkin places=places categories=categories entryStatusValues=entryStatusValues }}

<hr>

{{#each checkins as |checkin|}}
	{{> internal/checkin data=checkin categories=../categories entryStatusValues=../entryStatusValues }}
{{/each}}

</div>

<script type="text/javascript">
/** @type {HTMLDivElement} */
const alertContainer = document.getElementById('geolocation');

/** @type {HTMLParagraphElement} */
const alertText = document.getElementById('geolocation-text');

/** @type {HTMLInputElement} */
const inputLat = document.getElementById('new_checkin_lat');

/** @type {HTMLInputElement} */
const inputLong = document.getElementById('new_checkin_long');

/** @type {HTMLDivElement} */
const inputImages = document.getElementById('checkin-image-inputs');

/** @type {HTMLSelectElement} */
const select = document.getElementsByName('place_id')[0];

/** @type {HTMLDivElement} */
const searchButtonsContainer = document.getElementById('search_button_container');

/** @type {HTMLInputElement} */
const searchButtonCached = document.getElementById('search_button_cached');

/** @type {HTMLInputElement} */
const searchButtonGoogle = document.getElementById('search_button_google');

/** @returns {Promise<GeolocationPosition>} */
const getLocation = async () => new Promise((resolve, reject) => {
	navigator.geolocation.getCurrentPosition(resolve, reject);
});

/**
 * @param {'cached'|'google'} endpoint
 */
const searchPlaces = async (endpoint = 'cached') => {
	if (!("geolocation" in navigator)) return;

	// It should find the select field, but if not, skip geolocation.
	if (select === undefined) return;

	// Geolocation is available, notify user.
	alertContainer.style.display = 'block';

	// Attempt to get location. Will prompt for permission when appropriate.
	try {
		const { coords: { latitude: lat, longitude: long } } = await getLocation();
		inputLat.value = lat.toFixed(6);
		inputLong.value = long.toFixed(6);

		const response = await fetch(`/checkins/places/${endpoint}`, {
			method: 'POST',
			body: JSON.stringify({ lat, long }),
		});
		const { places } = await response.json();

		searchButtonsContainer.style.display = 'flex';
		select.innerHTML = '';
		for (const { value, label } of places) {
			const option = document.createElement('option');
			option.value = value;
			option.textContent = label;
			select.appendChild(option);
		}

		alertContainer.style.display = 'none';
	} catch (err) {
		alertContainer.classList.remove('info');
		alertContainer.classList.add('error');
		alertText.textContent = `üõë Could not find geolocation: ${err.message}`;
	}
};

searchPlaces();
searchButtonCached.onclick = () => searchPlaces('cached');
searchButtonGoogle.onclick = () => searchPlaces('google');

/**
 * @param {File} file
 */
const resizeImage = async (file) => new Promise((resolve, reject) => {
	// Create an Image object
	const img = new Image();

	// Set up the onload event handler
	img.onload = function() {
		// Create a canvas
		const canvas = document.createElement('canvas');
		const ctx = canvas.getContext('2d', { alpha: false });

		// Calculate the new image dimensions
		const isLandscape = img.height > img.width;
		const shouldResize = isLandscape
			? img.width > 960
			: img.height > 960;

		const ratio = isLandscape
			? Math.min(720 / img.width, 960 / img.height)
			: Math.min(960 / img.width, 720 / img.height);

		const newWidth = shouldResize
			? img.width * ratio
			: img.width;

		const newHeight = shouldResize
			? img.height * ratio
			: img.height;

		// Set canvas dimensions
		canvas.width = newWidth;
		canvas.height = newHeight;

		// Draw the image on the canvas
		ctx.drawImage(img, 0, 0, newWidth, newHeight);

		resolve(canvas.toDataURL('image/jpeg', shouldResize ? 0.8 : 0.9));
	};

	img.onerror = reject;
	img.onabort = reject;
	img.oncancel = reject;

	// Load the image file
	img.src = URL.createObjectURL(file);
});

/** @param {string} dataUrl */
const addImageToCheckin = (dataUrl) => {
	const container = document.createElement('div');
	container.classList.add('checkin-image-container');
	container.onclick = () => {
		inputImages.removeChild(container);
	};

	const overlay = document.createElement('div');
	overlay.classList.add('checkin-image-overlay');
	overlay.textContent = '√ó Remove';

	const image = document.createElement('img');
	image.classList.add('checkin-image');
	image.src = dataUrl;

	const input = document.createElement('input');
	input.type = 'hidden';
	input.name = 'photos[]';
	input.value = dataUrl;

	container.appendChild(image);
	container.appendChild(input);
	container.appendChild(overlay);

	inputImages.appendChild(container);
};

/** @type {NodeListOf<HTMLInputElement>}*/
const fileInputs = document.querySelectorAll("input[type=file]")

for (const input of fileInputs) {
	input.addEventListener("change", async (event) => {
		for (const file of event.target.files) {
			addImageToCheckin(await resizeImage(file));
		}

		input.value = '';
	});
}

</script>
